{"version":3,"sources":["../tools/tmp/src/Dexie.Observable.js"],"names":["Observable","db","wakeupObservers","lastWrittenRevision","latestRevision","name","Dexie","ignoreTransaction","on","fire","localStorage","setItem","crudMonitor","table","tableName","hook","subscribe","primKey","obj","trans","rv","undefined","schema","uuid","createUUID","keyPath","setByKeyPath","change","source","key","type","CREATE","promise","_changes","add","then","rev","_lastWrittenRevision","Math","max","this","onsuccess","resultKey","_then","put","onerror","err","delete","mods","oldObj","modsWithoutUndefined","anythingChanged","newObj","deepClone","propPath","mod","delByKeyPath","currentValue","getByKeyPath","JSON","stringify","UPDATE","DELETE","onLatestRevisionIncremented","dbname","handledRevision","vip","readChanges","catch","e","recursion","wasPartial","ongoingOperation","partial","ourSyncNode","mySyncNode","Promise","reject","LIMIT","where","above","myRevision","limit","toArray","changes","length","lastChange","update","lastHeartBeat","Date","now","deleteTimeStamp","nodeWasUpdated","browserIsShuttingDown","Error","close","console","error","global","location","reload","finally","poll","pollHandle","currentInstance","id","cleanup","consumeIntercommMessages","setTimeout","LOCAL_POLL","transaction","weBecameMaster","_syncNodes","below","NODE_TIMEOUT","and","node","modify","value","removeItem","isMaster","_intercomm","equals","msg","wantReply","consumeMessage","HIBERNATE_GRACE_PERIOD","deleteOldChanges","onBeforeUnload","event","wereTheOneDying","toString","onSuicide","nodeID","request","requestsWaitingForReply","requestId","isFailure","message","resolve","result","sendMessage","sender","extend","onIntercomm","localStorageImpl","SyncNode","defineClass","Number","String","url","syncProtocol","syncContext","syncOptions","Object","connected","status","appliedRemoteRevision","remoteBaseRevisions","local","remote","dbUploadState","tablesToUpload","currentTable","currentKey","localBaseRevision","defineProperty","get","fake","version","stores","_uncommittedChanges","mapToClass","DatabaseChange","Version","prototype","_parseStoresSpec","override","origFunc","dbSchema","call","keys","forEach","indexOf","substr","observable","_tableFactory","origCreateTable","mode","tableSchema","transactionPromiseFactory","apply","arguments","_transPromiseFactory","addEventType","promisableChain","nop","_createTransaction","storenames","dbschema","parent","dynamicallyOpened","addChanges","some","storeName","slice","push","rootTransaction","findRootTransaction","timeoutHandle","clearTimeout","origClose","unsubscribe","suicideNurseCall","origDelete","orderBy","last","latestRevisionIncremented","count","anyMasterNode","destinationNode","options","tables","addMessage","messageId","intercomm","recieverAlive","first","masterNode","broadcastMessage","bIncludeSelf","mySyncNodeId","each","f1","f2","res","thiz","args","self","Events","d","replace","c","r","random","floor","oldestNode","timeout","timedout","until","_onStorage","parts","split","prop","parseInt","newValue","isNaN","_onBeforeUnload","beforeunload","addEventListener","addons"],"mappings":"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","file":"dist/dexie-observable.min.js.map","sourcesContent":["/// <reference path=\"../../../dist/dexie.js\" />\n\n/**\r\n * Dexie.Observable.js\r\n * ===================\r\n * Dexie addon for observing database changes not just on local db instance but also on other instances and windows.\r\n *\r\n * version: {version} Alpha, {date}\r\n *\r\n * Disclaimber: This addon is in alpha status meaning that\r\n * its API and behavior may change.\r\n *\r\n */\nimport Dexie from 'dexie';\n\nvar global = self;\n\n/** class DatabaseChange\r\n    *\r\n    *  Object contained by the _changes table.\r\n    */\nvar DatabaseChange = Dexie.defineClass({\n    rev: Number, // Auto-incremented primary key\n    source: String, // Optional source creating the change. Set if transaction.source was set when doing the operation.\n    table: String, // Table name\n    key: Object, // Primary key. Any type.\n    type: Number, // 1 = CREATE, 2 = UPDATE, 3 = DELETE\n    obj: Object, // CREATE: obj contains the object created.\n    mods: Object, // UPDATE: mods contains the modifications made to the object.\n    oldObj: Object // DELETE: oldObj contains the object deleted. UPDATE: oldObj contains the old object before updates applied.\n});\n\n// Import some usable helper functions\nvar override = Dexie.override;\nvar Promise = Dexie.Promise;\nvar browserIsShuttingDown = false;\n\nexport default function Observable(db) {\n    /// <summary>\n    ///   Extension to Dexie providing Syncronization capabilities to Dexie.\n    /// </summary>\n    /// <param name=\"db\" type=\"Dexie\"></param>\n\n    var NODE_TIMEOUT = 20000,\n        // 20 seconds before local db instances are timed out. This is so that old changes can be deleted when not needed and to garbage collect old _syncNodes objects.\n    HIBERNATE_GRACE_PERIOD = 20000,\n        // 20 seconds\n    // LOCAL_POLL: The time to wait before polling local db for changes and cleaning up old nodes. \n    // Polling for changes is a fallback only needed in certain circomstances (when the onstorage event doesnt reach all listeners - when different browser windows doesnt share the same process)\n    LOCAL_POLL = 2000,\n        // 1 second. In real-world there will be this value + the time it takes to poll().\n    CREATE = 1,\n        UPDATE = 2,\n        DELETE = 3;\n\n    var localStorage = Observable.localStorageImpl;\n\n    /** class SyncNode\r\n        *\r\n        * Object contained in the _syncNodes table.\r\n        */\n    var SyncNode = Dexie.defineClass({\n        //id: Number,\n        myRevision: Number,\n        type: String, // \"local\" or \"remote\"\n        lastHeartBeat: Number,\n        deleteTimeStamp: Number, // In case lastHeartBeat is too old, a value of now + HIBERNATE_GRACE_PERIOD will be set here. If reached before node wakes up, node will be deleted.\n        url: String, // Only applicable for \"remote\" nodes. Only used in Dexie.Syncable.\n        isMaster: Number, // 1 if true. Not using Boolean because it's not possible to index Booleans in IE implementation of IDB.\n\n        // Below properties should be extended in Dexie.Syncable. Not here. They apply to remote nodes only (type == \"remote\"):\n        syncProtocol: String, // Tells which implementation of ISyncProtocol to use for remote syncing. \n        syncContext: null,\n        syncOptions: Object,\n        connected: false, // FIXTHIS: Remove! Replace with status.\n        status: Number,\n        appliedRemoteRevision: null,\n        remoteBaseRevisions: [{ local: Number, remote: null }],\n        dbUploadState: {\n            tablesToUpload: [String],\n            currentTable: String,\n            currentKey: null,\n            localBaseRevision: Number\n        }\n    });\n\n    var mySyncNode = null;\n\n    // Allow other addons to access the local sync node. May be needed by Dexie.Syncable.\n    Object.defineProperty(db, \"_localSyncNode\", {\n        get: function () {\n            return mySyncNode;\n        }\n    });\n\n    var pollHandle = null;\n\n    if (Dexie.fake) {\n        // This code will never run.\n        // It's here just to enable auto-complete in visual studio - helps a lot when writing code.\n        db.version(1).stores({\n            _syncNodes: \"++id,myRevision,lastHeartBeat\",\n            _changes: \"++rev\",\n            _intercomm: \"++id,destinationNode\",\n            _uncommittedChanges: \"++id,node\"\n        });\n        db._syncNodes.mapToClass(SyncNode);\n        db._changes.mapToClass(DatabaseChange);\n        mySyncNode = new SyncNode({\n            myRevision: 0,\n            type: \"local\",\n            lastHeartBeat: Date.now(),\n            deleteTimeStamp: null\n        });\n    }\n\n    //\n    // Override parsing the stores to add \"_changes\" and \"_syncNodes\" tables.\n    //\n    db.Version.prototype._parseStoresSpec = override(db.Version.prototype._parseStoresSpec, function (origFunc) {\n        return function (stores, dbSchema) {\n            // Create the _changes and _syncNodes tables\n            stores[\"_changes\"] = \"++rev\";\n            stores[\"_syncNodes\"] = \"++id,myRevision,lastHeartBeat,url,isMaster,type,status\";\n            stores[\"_intercomm\"] = \"++id,destinationNode\";\n            stores[\"_uncommittedChanges\"] = \"++id,node\"; // For remote syncing when server returns a partial result.\n            // Call default implementation. Will populate the dbSchema structures.\n            origFunc.call(this, stores, dbSchema);\n            // Allow UUID primary keys using $$ prefix on primary key or indexes\n            Object.keys(dbSchema).forEach(function (tableName) {\n                var schema = dbSchema[tableName];\n                if (schema.primKey.name.indexOf('$$') === 0) {\n                    schema.primKey.uuid = true;\n                    schema.primKey.name = schema.primKey.name.substr(2);\n                    schema.primKey.keyPath = schema.primKey.keyPath.substr(2);\n                }\n            });\n            // Now mark all observable tables\n            Object.keys(dbSchema).forEach(function (tableName) {\n                // Marked observable tables with \"observable\" in their TableSchema.\n                if (tableName.indexOf('_') !== 0 && tableName.indexOf('$') !== 0) {\n                    dbSchema[tableName].observable = true;\n                }\n            });\n        };\n    });\n\n    //\n    // Make sure to subscribe to \"creating\", \"updating\" and \"deleting\" hooks for all observable tables that were created in the stores() method.\n    //\n    db._tableFactory = override(db._tableFactory, function (origCreateTable) {\n        return function createTable(mode, tableSchema, transactionPromiseFactory) {\n            var table = origCreateTable.apply(this, arguments);\n            if (table.schema.observable && transactionPromiseFactory === db._transPromiseFactory) {\n                // Only crudMonitor when creating \n                crudMonitor(table);\n            }\n            if (table.name === \"_syncNodes\" && transactionPromiseFactory === db._transPromiseFactory) {\n                table.mapToClass(SyncNode);\n            }\n            return table;\n        };\n    });\n\n    // changes event on db:\n    db.on.addEventType({\n        changes: 'asap',\n        cleanup: [promisableChain, nop], // fire (nodesTable, changesTable, trans). Hook called when cleaning up nodes. Subscribers may return a Promise to to more stuff. May do additional stuff if local sync node is master.\n        message: 'asap'\n    });\n\n    //\n    // Overide transaction creation to always include the \"_changes\" store when any observable store is involved.\n    //\n    db._createTransaction = override(db._createTransaction, function (origFunc) {\n        return function (mode, storenames, dbschema, parent) {\n            if (db.dynamicallyOpened()) return origFunc.apply(this, arguments); // Don't observe dynamically opened databases.\n            var addChanges = false;\n            if (mode === 'readwrite' && storenames.some(function (storeName) {\n                return dbschema[storeName] && dbschema[storeName].observable;\n            })) {\n                // At least one included store is a observable store. Make sure to also include the _changes store.\n                addChanges = true;\n                storenames = storenames.slice(0); // Clone\n                if (storenames.indexOf(\"_changes\") === -1) storenames.push(\"_changes\"); // Otherwise, firefox will hang... (I've reported the bug to Mozilla@Bugzilla)\n            }\n            // Call original db._createTransaction()\n            var trans = origFunc.call(this, mode, storenames, dbschema, parent);\n            // If this transaction is bound to any observable table, make sure to add changes when transaction completes.\n            if (addChanges) {\n                trans._lastWrittenRevision = 0;\n                trans.on('complete', function () {\n                    if (trans._lastWrittenRevision) {\n                        // Changes were written in this transaction.\n                        if (!parent) {\n                            // This is root-level transaction, i.e. a physical commit has happened.\n                            // Delay-trigger a wakeup call:\n                            if (wakeupObservers.timeoutHandle) clearTimeout(wakeupObservers.timeoutHandle);\n                            wakeupObservers.timeoutHandle = setTimeout(function () {\n                                delete wakeupObservers.timeoutHandle;\n                                wakeupObservers(trans._lastWrittenRevision);\n                            }, 25);\n                        } else {\n                            // This is just a virtual commit of a sub transaction.\n                            // Wait with waking up observers until root transaction has committed.\n                            // Make sure to mark root transaction so that it will wakeup observers upon commit.\n                            var rootTransaction = function findRootTransaction(trans) {\n                                return trans.parent ? findRootTransaction(trans.parent) : trans;\n                            }(parent);\n                            rootTransaction._lastWrittenRevision = Math.max(trans._lastWrittenRevision, rootTransaction.lastWrittenRevision || 0);\n                        }\n                    }\n                });\n                // Derive \"source\" property from parent transaction by default\n                if (trans.parent && trans.parent.source) trans.source = trans.parent.source;\n            }\n            return trans;\n        };\n    });\n\n    // If Observable.latestRevsion[db.name] is undefined, set it to 0 so that comparing against it always works.\n    // You might think that it will always be undefined before this call, but in case another Dexie instance in the same\n    // window with the same database name has been created already, this static property will already be set correctly.\n    Observable.latestRevision[db.name] = Observable.latestRevision[db.name] || 0;\n\n    function wakeupObservers(lastWrittenRevision) {\n        // Make sure Observable.latestRevision[db.name] is still below our value, now when some time has elapsed and other db instances in same window possibly could have made changes too.\n        if (Observable.latestRevision[db.name] < lastWrittenRevision) {\n            // Set the static property lastRevision[db.name] to the revision of the last written change.\n            Observable.latestRevision[db.name] = lastWrittenRevision;\n            // Wakeup ourselves, and any other db instances on this window:\n            Dexie.ignoreTransaction(function () {\n                Observable.on('latestRevisionIncremented').fire(db.name, lastWrittenRevision);\n            });\n            // Observable.on.latestRevisionIncremented will only wakeup db's in current window.\n            // We need a storage event to wakeup other windwos.\n            // Since indexedDB lacks storage events, let's use the storage event from WebStorage just for\n            // the purpose to wakeup db instances in other windows.\n            localStorage.setItem('Dexie.Observable/latestRevision/' + db.name, lastWrittenRevision); // In IE, this will also wakeup our own window. However, onLatestRevisionIncremented will work around this by only running once per revision id.\n        }\n    }\n\n    db.close = override(db.close, function (origClose) {\n        return function () {\n            if (db.dynamicallyOpened()) return origClose.apply(this, arguments); // Don't observe dynamically opened databases.\n            // Teardown our framework.\n            if (wakeupObservers.timeoutHandle) {\n                clearTimeout(wakeupObservers.timeoutHandle);\n                delete wakeupObservers.timeoutHandle;\n            }\n            Observable.on('latestRevisionIncremented').unsubscribe(onLatestRevisionIncremented);\n            Observable.on('suicideNurseCall').unsubscribe(onSuicide);\n            Observable.on('intercomm').unsubscribe(onIntercomm);\n            Observable.on('beforeunload').unsubscribe(onBeforeUnload);\n            // Inform other db instances in same window that we are dying:\n            if (mySyncNode && mySyncNode.id) {\n                Observable.on.suicideNurseCall.fire(db.name, mySyncNode.id);\n                // Inform other windows as well:\n                localStorage.setItem('Dexie.Observable/deadnode:' + mySyncNode.id.toString() + '/' + db.name, \"dead\"); // In IE, this will also wakeup our own window. cleanup() may trigger twice per other db instance. But that doesnt to anything.\n                mySyncNode.deleteTimeStamp = 1; // One millisecond after 1970. Makes it occur in the past but still keeps it truthy.\n                mySyncNode.lastHeartBeat = 0;\n                db._syncNodes.put(mySyncNode); // This async operation may be cancelled since the browser is closing down now.\n                mySyncNode = null;\n            }\n\n            if (pollHandle) clearTimeout(pollHandle);\n            pollHandle = null;\n            return origClose.apply(this, arguments);\n        };\n    });\n\n    // Override Dexie.delete() in order to delete Observable.latestRevision[db.name].\n    db.delete = override(db.delete, function (origDelete) {\n        return function () {\n            return origDelete.apply(this, arguments).then(function (result) {\n                // Reset Observable.latestRevision[db.name]\n                Observable.latestRevision[db.name] = 0;\n                return result;\n            });\n        };\n    });\n\n    //\n    // The Creating/Updating/Deleting hook will make sure any change is stored to the changes table\n    //\n    function crudMonitor(table) {\n        /// <param name=\"table\" type=\"db.Table\"></param>\n        var tableName = table.name;\n\n        table.hook('creating').subscribe(function (primKey, obj, trans) {\n            /// <param name=\"trans\" type=\"db.Transaction\"></param>\n            var rv = undefined;\n            if (primKey === undefined && table.schema.primKey.uuid) {\n                primKey = rv = Observable.createUUID();\n                if (table.schema.primKey.keyPath) {\n                    Dexie.setByKeyPath(obj, table.schema.primKey.keyPath, primKey);\n                }\n            }\n\n            var change = {\n                source: trans.source || null, // If a \"source\" is marked on the transaction, store it. Useful for observers that want to ignore their own changes.\n                table: tableName,\n                key: primKey === undefined ? null : primKey,\n                type: CREATE,\n                obj: obj\n            };\n\n            var promise = db._changes.add(change).then(function (rev) {\n                trans._lastWrittenRevision = Math.max(trans._lastWrittenRevision, rev);\n                return rev;\n            });\n\n            // Wait for onsuccess so that we have the primKey if it is auto-incremented and update the change item if so.\n            this.onsuccess = function (resultKey) {\n                if (primKey != resultKey) promise._then(function () {\n                    change.key = resultKey;\n                    db._changes.put(change);\n                });\n            };\n            this.onerror = function (err) {\n                // If the main operation fails, make sure to regret the change\n                promise._then(function (rev) {\n                    // Will only happen if app code catches the main operation error to prohibit transaction from aborting.\n                    db._changes.delete(rev);\n                });\n            };\n\n            return rv;\n        });\n\n        table.hook('updating').subscribe(function (mods, primKey, oldObj, trans) {\n            /// <param name=\"trans\" type=\"db.Transaction\"></param>\n            // mods may contain property paths with undefined as value if the property\n            // is being deleted. Since we cannot persist undefined we need to act\n            // like those changes is setting the value to null instead.\n            var modsWithoutUndefined = {};\n            // As of current Dexie version (1.0.3) hook may be called even if it wouldnt really change.\n            // Therefore we may do that kind of optimization here - to not add change entries if\n            // there's nothing to change.\n            var anythingChanged = false;\n            var newObj = Dexie.deepClone(oldObj);\n            for (var propPath in mods) {\n                var mod = mods[propPath];\n                if (typeof mod === 'undefined') {\n                    Dexie.delByKeyPath(newObj, propPath);\n                    modsWithoutUndefined[propPath] = null; // Null is as close we could come to deleting a property when not allowing undefined.\n                    anythingChanged = true;\n                } else {\n                    var currentValue = Dexie.getByKeyPath(oldObj, propPath);\n                    if (mod !== currentValue && JSON.stringify(mod) !== JSON.stringify(currentValue)) {\n                        Dexie.setByKeyPath(newObj, propPath, mod);\n                        modsWithoutUndefined[propPath] = mod;\n                        anythingChanged = true;\n                    }\n                }\n            }\n            if (anythingChanged) {\n                var change = {\n                    source: trans.source || null, // If a \"source\" is marked on the transaction, store it. Useful for observers that want to ignore their own changes.\n                    table: tableName,\n                    key: primKey,\n                    type: UPDATE,\n                    mods: modsWithoutUndefined,\n                    oldObj: oldObj,\n                    obj: newObj\n                };\n                var promise = db._changes.add(change); // Just so we get the correct revision order of the update...\n                this.onsuccess = function () {\n                    promise._then(function (rev) {\n                        trans._lastWrittenRevision = Math.max(trans._lastWrittenRevision, rev);\n                    });\n                };\n                this.onerror = function (err) {\n                    // If the main operation fails, make sure to regret the change.\n                    promise._then(function (rev) {\n                        // Will only happen if app code catches the main operation error to prohibit transaction from aborting.\n                        db._changes.delete(rev);\n                    });\n                };\n            }\n        });\n\n        table.hook('deleting').subscribe(function (primKey, obj, trans) {\n            /// <param name=\"trans\" type=\"db.Transaction\"></param>\n            var promise = db._changes.add({\n                source: trans.source || null, // If a \"source\" is marked on the transaction, store it. Useful for observers that want to ignore their own changes.\n                table: tableName,\n                key: primKey,\n                type: DELETE,\n                oldObj: obj\n            }).then(function (rev) {\n                trans._lastWrittenRevision = Math.max(trans._lastWrittenRevision, rev);\n                return rev;\n            });\n            this.onerror = function () {\n                // If the main operation fails, make sure to regret the change.\n                // Using _then because if promise is already fullfilled, the standard then() would\n                // do setTimeout() and we would loose the transaction.\n                promise._then(function (rev) {\n                    // Will only happen if app code catches the main operation error to prohibit transaction from aborting.\n                    db._changes.delete(rev);\n                });\n            };\n        });\n    }\n\n    // When db opens, make sure to start monitor any changes before other db operations will start.\n    db.on(\"ready\", function startObserving() {\n        if (db.dynamicallyOpened()) return db; // Don't observe dynamically opened databases.\n        return db.table(\"_changes\").orderBy(\"rev\").last(function (lastChange) {\n            // Since startObserving() is called before database open() method, this will be the first database operation enqueued to db.\n            // Therefore we know that the retrieved value will be This query will\n            var latestRevision = lastChange ? lastChange.rev : 0;\n            mySyncNode = new SyncNode({\n                myRevision: latestRevision,\n                type: \"local\",\n                lastHeartBeat: Date.now(),\n                deleteTimeStamp: null,\n                isMaster: 0\n            });\n            if (Observable.latestRevision[db.name] < latestRevision) {\n                // Side track . For correctness whenever setting Observable.latestRevision[db.name] we must make sure the event is fired if increased:\n                // There are other db instances in same window that hasnt yet been informed about a new revision\n                Observable.latestRevision[db.name] = latestRevision;\n                Dexie.ignoreTransaction(function () {\n                    Observable.on.latestRevisionIncremented.fire(latestRevision);\n                });\n            }\n            // Add new sync node or if this is a reopening of the database after a close() call, update it.\n            return db.transaction('rw', '_syncNodes', function () {\n                db._syncNodes.where('isMaster').equals(1).count(function (anyMasterNode) {\n                    if (!anyMasterNode) {\n                        // There's no master node. Let's take that role then.\n                        mySyncNode.isMaster = 1;\n                    }\n                    // Add our node to DB and start subscribing to events\n                    db._syncNodes.add(mySyncNode).then(function () {\n                        Observable.on('latestRevisionIncremented', onLatestRevisionIncremented); // Wakeup when a new revision is available.\n                        Observable.on('beforeunload', onBeforeUnload);\n                        Observable.on('suicideNurseCall', onSuicide);\n                        Observable.on('intercomm', onIntercomm);\n                        // Start polling for changes and do cleanups:\n                        pollHandle = setTimeout(poll, LOCAL_POLL);\n                    });\n                });\n            }).then(function () {\n                cleanup();\n            });\n            //cleanup();\n            //});\n        });\n    }, true); // True means the on(ready) event will survive a db reopening (db.close() / db.open()).\n\n    var handledRevision = 0;\n\n    function onLatestRevisionIncremented(dbname, latestRevision) {\n        if (dbname === db.name) {\n            if (handledRevision >= latestRevision) return; // Make sure to only run once per revision. (Workaround for IE triggering storage event on same window)\n            handledRevision = latestRevision;\n            Dexie.vip(function () {\n                readChanges(latestRevision).catch('DatabaseClosedError', function (e) {\n                    // Handle database closed error gracefully while reading changes.\n                    // Don't trigger unhandledrejection\n                    // Even though we intercept the close() method, it might be called when in the middle of\n                    // reading changes and then that flow will cancel with DatabaseClosedError.\n                });\n            });\n        }\n    }\n\n    function readChanges(latestRevision, recursion, wasPartial) {\n        // Whenever changes are read, fire db.on(\"changes\") with the array of changes. Eventually, limit the array to 1000 entries or so (an entire database is\n        // downloaded from server AFTER we are initiated. For example, if first sync call fails, then after a while we get reconnected. However, that scenario\n        // should be handled in case database is totally empty we should fail if sync is not available)\n        if (!recursion && readChanges.ongoingOperation) {\n            // We are already reading changes. Prohibit a parallell execution of this which would lead to duplicate trigging of 'changes' event.\n            // Instead, the callback in toArray() will always check Observable.latestRevision[db.name] to see if it has changed and if so, re-launch readChanges().\n            // The caller should get the Promise instance from the ongoing operation so that the then() method will resolve when operation is finished.\n            return readChanges.ongoingOperation;\n        }\n\n        var partial = false;\n        var ourSyncNode = mySyncNode; // Because mySyncNode can suddenly be set to null on database close, and worse, can be set to a new value if database is reopened.\n        if (!ourSyncNode) {\n            return Promise.reject(\"Database closed\");\n        }\n        var LIMIT = 1000;\n        var promise = db._changes.where(\"rev\").above(ourSyncNode.myRevision).limit(LIMIT).toArray(function (changes) {\n            if (changes.length > 0) {\n                var lastChange = changes[changes.length - 1];\n                partial = changes.length === LIMIT;\n                db.on('changes').fire(changes, partial);\n                ourSyncNode.myRevision = lastChange.rev;\n            } else if (wasPartial) {\n                // No more changes, BUT since we have triggered on('changes') with partial = true,\n                // we HAVE TO trigger changes again with empty list and partial = false\n                db.on('changes').fire([], false);\n            }\n\n            return db.table(\"_syncNodes\").update(ourSyncNode, {\n                lastHeartBeat: Date.now(),\n                deleteTimeStamp: null, // Reset \"deleteTimeStamp\" flag if it was there.\n                myRevision: ourSyncNode.myRevision\n            });\n        }).then(function (nodeWasUpdated) {\n            if (!nodeWasUpdated) {\n                // My node has been deleted. We must have been lazy and got removed by another node.\n                if (browserIsShuttingDown) {\n                    throw new Error(\"Browser is shutting down\");\n                } else {\n                    db.close();\n                    console.error(\"Out of sync\"); // TODO: What to do? Reload the page?\n                    if (global.location) global.location.reload(true);\n                    throw new Error(\"Out of sync\"); // Will make current promise reject\n                }\n            }\n\n            // Check if more changes have come since we started reading changes in the first place. If so, relaunch readChanges and let the ongoing promise not\n            // resolve until all changes have been read.\n            if (partial || Observable.latestRevision[db.name] > ourSyncNode.myRevision) {\n                // Either there were more than 1000 changes or additional changes where added while we were reading these changes,\n                // In either case, call readChanges() again until we're done.\n                return readChanges(Observable.latestRevision[db.name], (recursion || 0) + 1, partial);\n            }\n        }).finally(function () {\n            delete readChanges.ongoingOperation;\n        });\n\n        if (!recursion) {\n            readChanges.ongoingOperation = promise;\n        }\n        return promise;\n    }\n\n    function poll() {\n        pollHandle = null;\n        var currentInstance = mySyncNode.id;\n        Dexie.vip(function () {\n            // VIP ourselves. Otherwise we might not be able to consume intercomm messages from master node before database has finished opening. This would make DB stall forever. Cannot rely on storage-event since it may not always work in some browsers of different processes.\n            readChanges(Observable.latestRevision[db.name]).then(cleanup).then(consumeIntercommMessages).catch('DatabaseClosedError', function (e) {\n                // Handle database closed error gracefully while reading changes.\n                // Don't signal 'unhandledrejection'.\n                // Even though we intercept the close() method, it might be called when in the middle of\n                // reading changes and then that flow will cancel with DatabaseClosedError.\n            }).finally(function () {\n                // Poll again in given interval:\n                if (mySyncNode && mySyncNode.id === currentInstance) {\n                    pollHandle = setTimeout(poll, LOCAL_POLL);\n                }\n            });\n        });\n    }\n\n    function cleanup() {\n        var ourSyncNode = mySyncNode;\n        if (!ourSyncNode) return Promise.reject(\"Database closed\");\n        return db.transaction('rw', '_syncNodes', '_changes', '_intercomm', function () {\n            // Cleanup dead local nodes that has no heartbeat for over a minute\n            // Dont do the following:\n            //nodes.where(\"lastHeartBeat\").below(Date.now() - NODE_TIMEOUT).and(function (node) { return node.type == \"local\"; }).delete();\n            // Because client may have been in hybernate mode and recently woken up. That would lead to deletion of all nodes.\n            // Instead, we should mark any old nodes for deletion in a minute or so. If they still dont wakeup after that minute we could consider them dead.\n            var weBecameMaster = false;\n            db._syncNodes.where(\"lastHeartBeat\").below(Date.now() - NODE_TIMEOUT).and(function (node) {\n                return node.type === 'local';\n            }).modify(function (node) {\n                if (node.deleteTimeStamp && node.deleteTimeStamp < Date.now()) {\n                    // Delete the node.\n                    delete this.value;\n                    // Cleanup localStorage \"deadnode:\" entry for this node (localStorage API was used to wakeup other windows (onstorage event) - an event type missing in indexedDB.)\n                    localStorage.removeItem('Dexie.Observable/deadnode:' + node.id + '/' + db.name);\n                    // Check if we are deleting a master node\n                    if (node.isMaster) {\n                        // The node we are deleting is master. We must take over that role.\n                        // OK to call nodes.update(). No need to call Dexie.vip() because nodes is opened in existing transaction!\n                        db._syncNodes.update(ourSyncNode, { isMaster: 1 });\n                        weBecameMaster = true;\n                    }\n                    // Cleanup intercomm messages destinated to the node being deleted:\n                    db._intercomm.where(\"destinationNode\").equals(node.id).modify(function (msg) {\n                        // OK to call intercomm. No need to call Dexie.vip() because intercomm is opened in existing transaction!\n                        // Delete the message from DB and if someone is waiting for reply, let ourselved answer the request.\n                        delete this.value;\n                        if (msg.wantReply) {\n                            // Message wants a reply, meaning someone must take over its messages when it dies. Let us be that one!\n                            Dexie.ignoreTransaction(function () {\n                                consumeMessage(msg);\n                            });\n                        }\n                    });\n                } else if (!node.deleteTimeStamp) {\n                    // Mark the node for deletion\n                    node.deleteTimeStamp = Date.now() + HIBERNATE_GRACE_PERIOD;\n                }\n            }).then(function () {\n                // Cleanup old revisions that no node is interested of.\n                Observable.deleteOldChanges(db);\n                return db.on(\"cleanup\").fire(weBecameMaster);\n            });\n        });\n    }\n\n    function onBeforeUnload(event) {\n        // Mark our own sync node for deletion.\n        if (!mySyncNode) return;\n        browserIsShuttingDown = true;\n        mySyncNode.deleteTimeStamp = 1; // One millisecond after 1970. Makes it occur in the past but still keeps it truthy.\n        mySyncNode.lastHeartBeat = 0;\n        db._syncNodes.put(mySyncNode); // This async operation may be cancelled since the browser is closing down now.\n        Observable.wereTheOneDying = true; // If other nodes in same window wakes up by this call, make sure they dont start taking over mastership and stuff...\n        // Inform other windows that we're gone, so that they may take over our role if needed. Setting localStorage item below will trigger Observable.onStorage, which will trigger onSuicie() below:\n        localStorage.setItem('Dexie.Observable/deadnode:' + mySyncNode.id.toString() + '/' + db.name, \"dead\"); // In IE, this will also wakeup our own window. However, that is doublechecked in nursecall subscriber below.\n    }\n\n    function onSuicide(dbname, nodeID) {\n        if (dbname === db.name && !Observable.wereTheOneDying) {\n            // Make sure it's dead indeed. Second bullet. Why? Because it has marked itself for deletion in the onbeforeunload event, which is fired just before window dies.\n            // It's own call to put() may have been cancelled.\n            // Note also that in IE, this event may be called twice, but that doesnt harm!\n            Dexie.vip(function () {\n                db._syncNodes.update(nodeID, { deleteTimeStamp: 1, lastHeartBeat: 0 }).then(cleanup);\n            });\n        }\n    }\n\n    //\n    // Intercommunication between nodes\n    //\n    // Enable inter-process communication between browser windows\n\n    var requestsWaitingForReply = {};\n\n    db.sendMessage = function (type, message, destinationNode, options) {\n        /// <param name=\"type\" type=\"String\">Type of message</param>\n        /// <param name=\"message\">Message to send</param>\n        /// <param name=\"destinationNode\" type=\"Number\">ID of destination node</param>\n        /// <param name=\"options\" type=\"Object\" optional=\"true\">{wantReply: Boolean, isFailure: Boolean, requestId: Number}. If wantReply, the returned promise will complete with the reply from remote. Otherwise it will complete when message has been successfully sent.</param>\n        if (!mySyncNode) return Promise.reject(\"Database closed\");\n        options = options || {};\n        var msg = { message: message, destinationNode: destinationNode, sender: mySyncNode.id, type: type };\n        Dexie.extend(msg, options); // wantReply: wantReply, success: !isFailure, requestId: ...\n        var tables = [\"_intercomm\"];\n        if (options.wantReply) tables.push(\"_syncNodes\"); // If caller wants a reply, include \"_syncNodes\" in transaction to check that there's a reciever there. Otherwise, new master will get it.\n        return db.transaction('rw?', tables, function () {\n            if (options.wantReply) {\n                // Check that there is a reciever there to take the request.\n                return db._syncNodes.where('id').equals(destinationNode).count(function (recieverAlive) {\n                    if (recieverAlive) return addMessage(msg);else return db._syncNodes.where('isMaster').above(0).first(function (masterNode) {\n                        msg.destinationNode = masterNode.id;\n                        return addMessage(msg);\n                    });\n                });\n            } else {\n                addMessage(msg); // No need to return Promise. Caller dont need a reply.\n            }\n\n            function addMessage(msg) {\n                return db._intercomm.add(msg).then(function (messageId) {\n                    localStorage.setItem(\"Dexie.Observable/intercomm/\" + db.name, messageId.toString());\n                    Dexie.ignoreTransaction(function () {\n                        Observable.on.intercomm.fire(db.name);\n                    });\n                    if (options.wantReply) {\n                        return new Promise(function (resolve, reject) {\n                            requestsWaitingForReply[messageId.toString()] = { resolve: resolve, reject: reject };\n                        });\n                    }\n                });\n            }\n        });\n    };\n\n    db.broadcastMessage = function (type, message, bIncludeSelf) {\n        if (!mySyncNode) return Promise.reject(\"Database closed\");\n        var mySyncNodeId = mySyncNode.id;\n        db._syncNodes.each(function (node) {\n            if (node.type === 'local' && (bIncludeSelf || node.id !== mySyncNodeId)) {\n                db.sendMessage(type, message, node.id);\n            }\n        });\n    };\n\n    db.observable = {};\n    db.observable.SyncNode = SyncNode;\n\n    function consumeIntercommMessages() {\n        // Check if we got messages:\n        if (!mySyncNode) return Promise.reject(\"Database closed\");\n        return db.table('_intercomm').where(\"destinationNode\").equals(mySyncNode.id).modify(function (msg) {\n            // For each message, fire the event and remove message.\n            delete this.value;\n            Dexie.ignoreTransaction(function () {\n                consumeMessage(msg);\n            });\n        });\n    }\n\n    function consumeMessage(msg) {\n        if (msg.type === 'response') {\n            // This is a response. Lookup pending request and fulfill it's promise.\n            var request = requestsWaitingForReply[msg.requestId.toString()];\n            if (request) {\n                if (msg.isFailure) {\n                    request.reject(msg.message.error);\n                } else {\n                    request.resolve(msg.message.result);\n                }\n                delete requestsWaitingForReply[msg.requestId.toString()];\n            }\n        } else {\n            // This is a message or request. Fire the event and add an API for the subscriber to use if reply is requested\n            msg.resolve = function (result) {\n                db.sendMessage('response', { result: result }, msg.sender, { requestId: msg.id });\n            };\n            msg.reject = function (error) {\n                db.sendMessage('response', { error: error.toString() }, msg.sender, { isFailure: true, requestId: msg.id });\n            };\n            var message = msg.message;\n            delete msg.message;\n            Dexie.extend(msg, message);\n            db.on.message.fire(msg);\n        }\n    }\n\n    function onIntercomm(dbname) {\n        // When storage event trigger us to check\n        if (dbname === db.name) {\n            consumeIntercommMessages();\n        }\n    }\n}\n\n//\n// Help functions\n//\n\nfunction nop() {};\n\nfunction promisableChain(f1, f2) {\n    if (f1 === nop) return f2;\n    return function () {\n        var res = f1.apply(this, arguments);\n        if (res && typeof res.then === 'function') {\n            var thiz = this,\n                args = arguments;\n            return res.then(function () {\n                return f2.apply(thiz, args);\n            });\n        }\n        return f2.apply(this, arguments);\n    };\n}\n\n//\n// Static properties and methods\n// \n\nObservable.latestRevision = {}; // Latest revision PER DATABASE. Example: Observable.latestRevision.FriendsDB = 37;\nObservable.on = Dexie.Events(null, \"latestRevisionIncremented\", \"suicideNurseCall\", \"intercomm\", \"beforeunload\"); // fire(dbname, value);\nObservable.createUUID = function () {\n    // Decent solution from http://stackoverflow.com/questions/105034/how-to-create-a-guid-uuid-in-javascript\n    var d = Date.now();\n    var uuid = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {\n        var r = (d + Math.random() * 16) % 16 | 0;\n        d = Math.floor(d / 16);\n        return (c === 'x' ? r : r & 0x7 | 0x8).toString(16);\n    });\n    return uuid;\n};\n\nObservable.deleteOldChanges = function (db) {\n    db._syncNodes.orderBy(\"myRevision\").first(function (oldestNode) {\n        var timeout = Date.now() + 300,\n            timedout = false;\n        db._changes.where(\"rev\").below(oldestNode.myRevision).until(function () {\n            return timedout = Date.now() > timeout;\n        }).delete().then(function () {\n            // If not done garbage collecting, reschedule a continuation of it until done.\n            if (timedout) setTimeout(function () {\n                Observable.deleteOldChanges(db);\n            }, 10);\n        });\n    });\n};\n\nObservable._onStorage = function onStorage(event) {\n    // We use the onstorage event to trigger onLatestRevisionIncremented since we will wake up when other windows modify the DB as well!\n    if (event.key.indexOf(\"Dexie.Observable/\") === 0) {\n        // For example \"Dexie.Observable/latestRevision/FriendsDB\"\n        var parts = event.key.split('/');\n        var prop = parts[1];\n        var dbname = parts[2];\n        if (prop === 'latestRevision') {\n            var rev = parseInt(event.newValue, 10);\n            if (!isNaN(rev) && rev > Observable.latestRevision[dbname]) {\n                Observable.latestRevision[dbname] = rev;\n                Dexie.ignoreTransaction(function () {\n                    Observable.on('latestRevisionIncremented').fire(dbname, rev);\n                });\n            }\n        } else if (prop.indexOf(\"deadnode:\") === 0) {\n            var nodeID = parseInt(prop.split(':')[1], 10);\n            if (event.newValue) {\n                Observable.on.suicideNurseCall.fire(dbname, nodeID);\n            }\n        } else if (prop === 'intercomm') {\n            if (event.newValue) {\n                Observable.on.intercomm.fire(dbname);\n            }\n        }\n    }\n};\n\nObservable._onBeforeUnload = function () {\n    Observable.on.beforeunload.fire();\n};\n\nObservable.localStorageImpl = global.localStorage;\n\n//\n// Map window events to static events in Dexie.Observable:\n//\nif (global.addEventListener) {\n    global.addEventListener(\"storage\", Observable._onStorage);\n    global.addEventListener(\"beforeunload\", Observable._onBeforeUnload);\n}\n// Register addon:\nDexie.Observable = Observable;\nDexie.addons.push(Observable);"]}