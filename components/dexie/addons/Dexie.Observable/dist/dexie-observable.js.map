{"version":3,"file":"dexie-observable.js","sources":["../tools/tmp/src/Dexie.Observable.js"],"sourcesContent":["/// <reference path=\"../../../dist/dexie.js\" />\n\n/**\r\n * Dexie.Observable.js\r\n * ===================\r\n * Dexie addon for observing database changes not just on local db instance but also on other instances and windows.\r\n *\r\n * version: {version} Alpha, {date}\r\n *\r\n * Disclaimber: This addon is in alpha status meaning that\r\n * its API and behavior may change.\r\n *\r\n */\nimport Dexie from 'dexie';\n\nvar global = self;\n\n/** class DatabaseChange\r\n    *\r\n    *  Object contained by the _changes table.\r\n    */\nvar DatabaseChange = Dexie.defineClass({\n    rev: Number, // Auto-incremented primary key\n    source: String, // Optional source creating the change. Set if transaction.source was set when doing the operation.\n    table: String, // Table name\n    key: Object, // Primary key. Any type.\n    type: Number, // 1 = CREATE, 2 = UPDATE, 3 = DELETE\n    obj: Object, // CREATE: obj contains the object created.\n    mods: Object, // UPDATE: mods contains the modifications made to the object.\n    oldObj: Object // DELETE: oldObj contains the object deleted. UPDATE: oldObj contains the old object before updates applied.\n});\n\n// Import some usable helper functions\nvar override = Dexie.override;\nvar Promise = Dexie.Promise;\nvar browserIsShuttingDown = false;\n\nexport default function Observable(db) {\n    /// <summary>\n    ///   Extension to Dexie providing Syncronization capabilities to Dexie.\n    /// </summary>\n    /// <param name=\"db\" type=\"Dexie\"></param>\n\n    var NODE_TIMEOUT = 20000,\n        // 20 seconds before local db instances are timed out. This is so that old changes can be deleted when not needed and to garbage collect old _syncNodes objects.\n    HIBERNATE_GRACE_PERIOD = 20000,\n        // 20 seconds\n    // LOCAL_POLL: The time to wait before polling local db for changes and cleaning up old nodes. \n    // Polling for changes is a fallback only needed in certain circomstances (when the onstorage event doesnt reach all listeners - when different browser windows doesnt share the same process)\n    LOCAL_POLL = 2000,\n        // 1 second. In real-world there will be this value + the time it takes to poll().\n    CREATE = 1,\n        UPDATE = 2,\n        DELETE = 3;\n\n    var localStorage = Observable.localStorageImpl;\n\n    /** class SyncNode\r\n        *\r\n        * Object contained in the _syncNodes table.\r\n        */\n    var SyncNode = Dexie.defineClass({\n        //id: Number,\n        myRevision: Number,\n        type: String, // \"local\" or \"remote\"\n        lastHeartBeat: Number,\n        deleteTimeStamp: Number, // In case lastHeartBeat is too old, a value of now + HIBERNATE_GRACE_PERIOD will be set here. If reached before node wakes up, node will be deleted.\n        url: String, // Only applicable for \"remote\" nodes. Only used in Dexie.Syncable.\n        isMaster: Number, // 1 if true. Not using Boolean because it's not possible to index Booleans in IE implementation of IDB.\n\n        // Below properties should be extended in Dexie.Syncable. Not here. They apply to remote nodes only (type == \"remote\"):\n        syncProtocol: String, // Tells which implementation of ISyncProtocol to use for remote syncing. \n        syncContext: null,\n        syncOptions: Object,\n        connected: false, // FIXTHIS: Remove! Replace with status.\n        status: Number,\n        appliedRemoteRevision: null,\n        remoteBaseRevisions: [{ local: Number, remote: null }],\n        dbUploadState: {\n            tablesToUpload: [String],\n            currentTable: String,\n            currentKey: null,\n            localBaseRevision: Number\n        }\n    });\n\n    var mySyncNode = null;\n\n    // Allow other addons to access the local sync node. May be needed by Dexie.Syncable.\n    Object.defineProperty(db, \"_localSyncNode\", {\n        get: function () {\n            return mySyncNode;\n        }\n    });\n\n    var pollHandle = null;\n\n    if (Dexie.fake) {\n        // This code will never run.\n        // It's here just to enable auto-complete in visual studio - helps a lot when writing code.\n        db.version(1).stores({\n            _syncNodes: \"++id,myRevision,lastHeartBeat\",\n            _changes: \"++rev\",\n            _intercomm: \"++id,destinationNode\",\n            _uncommittedChanges: \"++id,node\"\n        });\n        db._syncNodes.mapToClass(SyncNode);\n        db._changes.mapToClass(DatabaseChange);\n        mySyncNode = new SyncNode({\n            myRevision: 0,\n            type: \"local\",\n            lastHeartBeat: Date.now(),\n            deleteTimeStamp: null\n        });\n    }\n\n    //\n    // Override parsing the stores to add \"_changes\" and \"_syncNodes\" tables.\n    //\n    db.Version.prototype._parseStoresSpec = override(db.Version.prototype._parseStoresSpec, function (origFunc) {\n        return function (stores, dbSchema) {\n            // Create the _changes and _syncNodes tables\n            stores[\"_changes\"] = \"++rev\";\n            stores[\"_syncNodes\"] = \"++id,myRevision,lastHeartBeat,url,isMaster,type,status\";\n            stores[\"_intercomm\"] = \"++id,destinationNode\";\n            stores[\"_uncommittedChanges\"] = \"++id,node\"; // For remote syncing when server returns a partial result.\n            // Call default implementation. Will populate the dbSchema structures.\n            origFunc.call(this, stores, dbSchema);\n            // Allow UUID primary keys using $$ prefix on primary key or indexes\n            Object.keys(dbSchema).forEach(function (tableName) {\n                var schema = dbSchema[tableName];\n                if (schema.primKey.name.indexOf('$$') === 0) {\n                    schema.primKey.uuid = true;\n                    schema.primKey.name = schema.primKey.name.substr(2);\n                    schema.primKey.keyPath = schema.primKey.keyPath.substr(2);\n                }\n            });\n            // Now mark all observable tables\n            Object.keys(dbSchema).forEach(function (tableName) {\n                // Marked observable tables with \"observable\" in their TableSchema.\n                if (tableName.indexOf('_') !== 0 && tableName.indexOf('$') !== 0) {\n                    dbSchema[tableName].observable = true;\n                }\n            });\n        };\n    });\n\n    //\n    // Make sure to subscribe to \"creating\", \"updating\" and \"deleting\" hooks for all observable tables that were created in the stores() method.\n    //\n    db._tableFactory = override(db._tableFactory, function (origCreateTable) {\n        return function createTable(mode, tableSchema, transactionPromiseFactory) {\n            var table = origCreateTable.apply(this, arguments);\n            if (table.schema.observable && transactionPromiseFactory === db._transPromiseFactory) {\n                // Only crudMonitor when creating \n                crudMonitor(table);\n            }\n            if (table.name === \"_syncNodes\" && transactionPromiseFactory === db._transPromiseFactory) {\n                table.mapToClass(SyncNode);\n            }\n            return table;\n        };\n    });\n\n    // changes event on db:\n    db.on.addEventType({\n        changes: 'asap',\n        cleanup: [promisableChain, nop], // fire (nodesTable, changesTable, trans). Hook called when cleaning up nodes. Subscribers may return a Promise to to more stuff. May do additional stuff if local sync node is master.\n        message: 'asap'\n    });\n\n    //\n    // Overide transaction creation to always include the \"_changes\" store when any observable store is involved.\n    //\n    db._createTransaction = override(db._createTransaction, function (origFunc) {\n        return function (mode, storenames, dbschema, parent) {\n            if (db.dynamicallyOpened()) return origFunc.apply(this, arguments); // Don't observe dynamically opened databases.\n            var addChanges = false;\n            if (mode === 'readwrite' && storenames.some(function (storeName) {\n                return dbschema[storeName] && dbschema[storeName].observable;\n            })) {\n                // At least one included store is a observable store. Make sure to also include the _changes store.\n                addChanges = true;\n                storenames = storenames.slice(0); // Clone\n                if (storenames.indexOf(\"_changes\") === -1) storenames.push(\"_changes\"); // Otherwise, firefox will hang... (I've reported the bug to Mozilla@Bugzilla)\n            }\n            // Call original db._createTransaction()\n            var trans = origFunc.call(this, mode, storenames, dbschema, parent);\n            // If this transaction is bound to any observable table, make sure to add changes when transaction completes.\n            if (addChanges) {\n                trans._lastWrittenRevision = 0;\n                trans.on('complete', function () {\n                    if (trans._lastWrittenRevision) {\n                        // Changes were written in this transaction.\n                        if (!parent) {\n                            // This is root-level transaction, i.e. a physical commit has happened.\n                            // Delay-trigger a wakeup call:\n                            if (wakeupObservers.timeoutHandle) clearTimeout(wakeupObservers.timeoutHandle);\n                            wakeupObservers.timeoutHandle = setTimeout(function () {\n                                delete wakeupObservers.timeoutHandle;\n                                wakeupObservers(trans._lastWrittenRevision);\n                            }, 25);\n                        } else {\n                            // This is just a virtual commit of a sub transaction.\n                            // Wait with waking up observers until root transaction has committed.\n                            // Make sure to mark root transaction so that it will wakeup observers upon commit.\n                            var rootTransaction = function findRootTransaction(trans) {\n                                return trans.parent ? findRootTransaction(trans.parent) : trans;\n                            }(parent);\n                            rootTransaction._lastWrittenRevision = Math.max(trans._lastWrittenRevision, rootTransaction.lastWrittenRevision || 0);\n                        }\n                    }\n                });\n                // Derive \"source\" property from parent transaction by default\n                if (trans.parent && trans.parent.source) trans.source = trans.parent.source;\n            }\n            return trans;\n        };\n    });\n\n    // If Observable.latestRevsion[db.name] is undefined, set it to 0 so that comparing against it always works.\n    // You might think that it will always be undefined before this call, but in case another Dexie instance in the same\n    // window with the same database name has been created already, this static property will already be set correctly.\n    Observable.latestRevision[db.name] = Observable.latestRevision[db.name] || 0;\n\n    function wakeupObservers(lastWrittenRevision) {\n        // Make sure Observable.latestRevision[db.name] is still below our value, now when some time has elapsed and other db instances in same window possibly could have made changes too.\n        if (Observable.latestRevision[db.name] < lastWrittenRevision) {\n            // Set the static property lastRevision[db.name] to the revision of the last written change.\n            Observable.latestRevision[db.name] = lastWrittenRevision;\n            // Wakeup ourselves, and any other db instances on this window:\n            Dexie.ignoreTransaction(function () {\n                Observable.on('latestRevisionIncremented').fire(db.name, lastWrittenRevision);\n            });\n            // Observable.on.latestRevisionIncremented will only wakeup db's in current window.\n            // We need a storage event to wakeup other windwos.\n            // Since indexedDB lacks storage events, let's use the storage event from WebStorage just for\n            // the purpose to wakeup db instances in other windows.\n            localStorage.setItem('Dexie.Observable/latestRevision/' + db.name, lastWrittenRevision); // In IE, this will also wakeup our own window. However, onLatestRevisionIncremented will work around this by only running once per revision id.\n        }\n    }\n\n    db.close = override(db.close, function (origClose) {\n        return function () {\n            if (db.dynamicallyOpened()) return origClose.apply(this, arguments); // Don't observe dynamically opened databases.\n            // Teardown our framework.\n            if (wakeupObservers.timeoutHandle) {\n                clearTimeout(wakeupObservers.timeoutHandle);\n                delete wakeupObservers.timeoutHandle;\n            }\n            Observable.on('latestRevisionIncremented').unsubscribe(onLatestRevisionIncremented);\n            Observable.on('suicideNurseCall').unsubscribe(onSuicide);\n            Observable.on('intercomm').unsubscribe(onIntercomm);\n            Observable.on('beforeunload').unsubscribe(onBeforeUnload);\n            // Inform other db instances in same window that we are dying:\n            if (mySyncNode && mySyncNode.id) {\n                Observable.on.suicideNurseCall.fire(db.name, mySyncNode.id);\n                // Inform other windows as well:\n                localStorage.setItem('Dexie.Observable/deadnode:' + mySyncNode.id.toString() + '/' + db.name, \"dead\"); // In IE, this will also wakeup our own window. cleanup() may trigger twice per other db instance. But that doesnt to anything.\n                mySyncNode.deleteTimeStamp = 1; // One millisecond after 1970. Makes it occur in the past but still keeps it truthy.\n                mySyncNode.lastHeartBeat = 0;\n                db._syncNodes.put(mySyncNode); // This async operation may be cancelled since the browser is closing down now.\n                mySyncNode = null;\n            }\n\n            if (pollHandle) clearTimeout(pollHandle);\n            pollHandle = null;\n            return origClose.apply(this, arguments);\n        };\n    });\n\n    // Override Dexie.delete() in order to delete Observable.latestRevision[db.name].\n    db.delete = override(db.delete, function (origDelete) {\n        return function () {\n            return origDelete.apply(this, arguments).then(function (result) {\n                // Reset Observable.latestRevision[db.name]\n                Observable.latestRevision[db.name] = 0;\n                return result;\n            });\n        };\n    });\n\n    //\n    // The Creating/Updating/Deleting hook will make sure any change is stored to the changes table\n    //\n    function crudMonitor(table) {\n        /// <param name=\"table\" type=\"db.Table\"></param>\n        var tableName = table.name;\n\n        table.hook('creating').subscribe(function (primKey, obj, trans) {\n            /// <param name=\"trans\" type=\"db.Transaction\"></param>\n            var rv = undefined;\n            if (primKey === undefined && table.schema.primKey.uuid) {\n                primKey = rv = Observable.createUUID();\n                if (table.schema.primKey.keyPath) {\n                    Dexie.setByKeyPath(obj, table.schema.primKey.keyPath, primKey);\n                }\n            }\n\n            var change = {\n                source: trans.source || null, // If a \"source\" is marked on the transaction, store it. Useful for observers that want to ignore their own changes.\n                table: tableName,\n                key: primKey === undefined ? null : primKey,\n                type: CREATE,\n                obj: obj\n            };\n\n            var promise = db._changes.add(change).then(function (rev) {\n                trans._lastWrittenRevision = Math.max(trans._lastWrittenRevision, rev);\n                return rev;\n            });\n\n            // Wait for onsuccess so that we have the primKey if it is auto-incremented and update the change item if so.\n            this.onsuccess = function (resultKey) {\n                if (primKey != resultKey) promise._then(function () {\n                    change.key = resultKey;\n                    db._changes.put(change);\n                });\n            };\n            this.onerror = function (err) {\n                // If the main operation fails, make sure to regret the change\n                promise._then(function (rev) {\n                    // Will only happen if app code catches the main operation error to prohibit transaction from aborting.\n                    db._changes.delete(rev);\n                });\n            };\n\n            return rv;\n        });\n\n        table.hook('updating').subscribe(function (mods, primKey, oldObj, trans) {\n            /// <param name=\"trans\" type=\"db.Transaction\"></param>\n            // mods may contain property paths with undefined as value if the property\n            // is being deleted. Since we cannot persist undefined we need to act\n            // like those changes is setting the value to null instead.\n            var modsWithoutUndefined = {};\n            // As of current Dexie version (1.0.3) hook may be called even if it wouldnt really change.\n            // Therefore we may do that kind of optimization here - to not add change entries if\n            // there's nothing to change.\n            var anythingChanged = false;\n            var newObj = Dexie.deepClone(oldObj);\n            for (var propPath in mods) {\n                var mod = mods[propPath];\n                if (typeof mod === 'undefined') {\n                    Dexie.delByKeyPath(newObj, propPath);\n                    modsWithoutUndefined[propPath] = null; // Null is as close we could come to deleting a property when not allowing undefined.\n                    anythingChanged = true;\n                } else {\n                    var currentValue = Dexie.getByKeyPath(oldObj, propPath);\n                    if (mod !== currentValue && JSON.stringify(mod) !== JSON.stringify(currentValue)) {\n                        Dexie.setByKeyPath(newObj, propPath, mod);\n                        modsWithoutUndefined[propPath] = mod;\n                        anythingChanged = true;\n                    }\n                }\n            }\n            if (anythingChanged) {\n                var change = {\n                    source: trans.source || null, // If a \"source\" is marked on the transaction, store it. Useful for observers that want to ignore their own changes.\n                    table: tableName,\n                    key: primKey,\n                    type: UPDATE,\n                    mods: modsWithoutUndefined,\n                    oldObj: oldObj,\n                    obj: newObj\n                };\n                var promise = db._changes.add(change); // Just so we get the correct revision order of the update...\n                this.onsuccess = function () {\n                    promise._then(function (rev) {\n                        trans._lastWrittenRevision = Math.max(trans._lastWrittenRevision, rev);\n                    });\n                };\n                this.onerror = function (err) {\n                    // If the main operation fails, make sure to regret the change.\n                    promise._then(function (rev) {\n                        // Will only happen if app code catches the main operation error to prohibit transaction from aborting.\n                        db._changes.delete(rev);\n                    });\n                };\n            }\n        });\n\n        table.hook('deleting').subscribe(function (primKey, obj, trans) {\n            /// <param name=\"trans\" type=\"db.Transaction\"></param>\n            var promise = db._changes.add({\n                source: trans.source || null, // If a \"source\" is marked on the transaction, store it. Useful for observers that want to ignore their own changes.\n                table: tableName,\n                key: primKey,\n                type: DELETE,\n                oldObj: obj\n            }).then(function (rev) {\n                trans._lastWrittenRevision = Math.max(trans._lastWrittenRevision, rev);\n                return rev;\n            });\n            this.onerror = function () {\n                // If the main operation fails, make sure to regret the change.\n                // Using _then because if promise is already fullfilled, the standard then() would\n                // do setTimeout() and we would loose the transaction.\n                promise._then(function (rev) {\n                    // Will only happen if app code catches the main operation error to prohibit transaction from aborting.\n                    db._changes.delete(rev);\n                });\n            };\n        });\n    }\n\n    // When db opens, make sure to start monitor any changes before other db operations will start.\n    db.on(\"ready\", function startObserving() {\n        if (db.dynamicallyOpened()) return db; // Don't observe dynamically opened databases.\n        return db.table(\"_changes\").orderBy(\"rev\").last(function (lastChange) {\n            // Since startObserving() is called before database open() method, this will be the first database operation enqueued to db.\n            // Therefore we know that the retrieved value will be This query will\n            var latestRevision = lastChange ? lastChange.rev : 0;\n            mySyncNode = new SyncNode({\n                myRevision: latestRevision,\n                type: \"local\",\n                lastHeartBeat: Date.now(),\n                deleteTimeStamp: null,\n                isMaster: 0\n            });\n            if (Observable.latestRevision[db.name] < latestRevision) {\n                // Side track . For correctness whenever setting Observable.latestRevision[db.name] we must make sure the event is fired if increased:\n                // There are other db instances in same window that hasnt yet been informed about a new revision\n                Observable.latestRevision[db.name] = latestRevision;\n                Dexie.ignoreTransaction(function () {\n                    Observable.on.latestRevisionIncremented.fire(latestRevision);\n                });\n            }\n            // Add new sync node or if this is a reopening of the database after a close() call, update it.\n            return db.transaction('rw', '_syncNodes', function () {\n                db._syncNodes.where('isMaster').equals(1).count(function (anyMasterNode) {\n                    if (!anyMasterNode) {\n                        // There's no master node. Let's take that role then.\n                        mySyncNode.isMaster = 1;\n                    }\n                    // Add our node to DB and start subscribing to events\n                    db._syncNodes.add(mySyncNode).then(function () {\n                        Observable.on('latestRevisionIncremented', onLatestRevisionIncremented); // Wakeup when a new revision is available.\n                        Observable.on('beforeunload', onBeforeUnload);\n                        Observable.on('suicideNurseCall', onSuicide);\n                        Observable.on('intercomm', onIntercomm);\n                        // Start polling for changes and do cleanups:\n                        pollHandle = setTimeout(poll, LOCAL_POLL);\n                    });\n                });\n            }).then(function () {\n                cleanup();\n            });\n            //cleanup();\n            //});\n        });\n    }, true); // True means the on(ready) event will survive a db reopening (db.close() / db.open()).\n\n    var handledRevision = 0;\n\n    function onLatestRevisionIncremented(dbname, latestRevision) {\n        if (dbname === db.name) {\n            if (handledRevision >= latestRevision) return; // Make sure to only run once per revision. (Workaround for IE triggering storage event on same window)\n            handledRevision = latestRevision;\n            Dexie.vip(function () {\n                readChanges(latestRevision).catch('DatabaseClosedError', function (e) {\n                    // Handle database closed error gracefully while reading changes.\n                    // Don't trigger unhandledrejection\n                    // Even though we intercept the close() method, it might be called when in the middle of\n                    // reading changes and then that flow will cancel with DatabaseClosedError.\n                });\n            });\n        }\n    }\n\n    function readChanges(latestRevision, recursion, wasPartial) {\n        // Whenever changes are read, fire db.on(\"changes\") with the array of changes. Eventually, limit the array to 1000 entries or so (an entire database is\n        // downloaded from server AFTER we are initiated. For example, if first sync call fails, then after a while we get reconnected. However, that scenario\n        // should be handled in case database is totally empty we should fail if sync is not available)\n        if (!recursion && readChanges.ongoingOperation) {\n            // We are already reading changes. Prohibit a parallell execution of this which would lead to duplicate trigging of 'changes' event.\n            // Instead, the callback in toArray() will always check Observable.latestRevision[db.name] to see if it has changed and if so, re-launch readChanges().\n            // The caller should get the Promise instance from the ongoing operation so that the then() method will resolve when operation is finished.\n            return readChanges.ongoingOperation;\n        }\n\n        var partial = false;\n        var ourSyncNode = mySyncNode; // Because mySyncNode can suddenly be set to null on database close, and worse, can be set to a new value if database is reopened.\n        if (!ourSyncNode) {\n            return Promise.reject(\"Database closed\");\n        }\n        var LIMIT = 1000;\n        var promise = db._changes.where(\"rev\").above(ourSyncNode.myRevision).limit(LIMIT).toArray(function (changes) {\n            if (changes.length > 0) {\n                var lastChange = changes[changes.length - 1];\n                partial = changes.length === LIMIT;\n                db.on('changes').fire(changes, partial);\n                ourSyncNode.myRevision = lastChange.rev;\n            } else if (wasPartial) {\n                // No more changes, BUT since we have triggered on('changes') with partial = true,\n                // we HAVE TO trigger changes again with empty list and partial = false\n                db.on('changes').fire([], false);\n            }\n\n            return db.table(\"_syncNodes\").update(ourSyncNode, {\n                lastHeartBeat: Date.now(),\n                deleteTimeStamp: null, // Reset \"deleteTimeStamp\" flag if it was there.\n                myRevision: ourSyncNode.myRevision\n            });\n        }).then(function (nodeWasUpdated) {\n            if (!nodeWasUpdated) {\n                // My node has been deleted. We must have been lazy and got removed by another node.\n                if (browserIsShuttingDown) {\n                    throw new Error(\"Browser is shutting down\");\n                } else {\n                    db.close();\n                    console.error(\"Out of sync\"); // TODO: What to do? Reload the page?\n                    if (global.location) global.location.reload(true);\n                    throw new Error(\"Out of sync\"); // Will make current promise reject\n                }\n            }\n\n            // Check if more changes have come since we started reading changes in the first place. If so, relaunch readChanges and let the ongoing promise not\n            // resolve until all changes have been read.\n            if (partial || Observable.latestRevision[db.name] > ourSyncNode.myRevision) {\n                // Either there were more than 1000 changes or additional changes where added while we were reading these changes,\n                // In either case, call readChanges() again until we're done.\n                return readChanges(Observable.latestRevision[db.name], (recursion || 0) + 1, partial);\n            }\n        }).finally(function () {\n            delete readChanges.ongoingOperation;\n        });\n\n        if (!recursion) {\n            readChanges.ongoingOperation = promise;\n        }\n        return promise;\n    }\n\n    function poll() {\n        pollHandle = null;\n        var currentInstance = mySyncNode.id;\n        Dexie.vip(function () {\n            // VIP ourselves. Otherwise we might not be able to consume intercomm messages from master node before database has finished opening. This would make DB stall forever. Cannot rely on storage-event since it may not always work in some browsers of different processes.\n            readChanges(Observable.latestRevision[db.name]).then(cleanup).then(consumeIntercommMessages).catch('DatabaseClosedError', function (e) {\n                // Handle database closed error gracefully while reading changes.\n                // Don't signal 'unhandledrejection'.\n                // Even though we intercept the close() method, it might be called when in the middle of\n                // reading changes and then that flow will cancel with DatabaseClosedError.\n            }).finally(function () {\n                // Poll again in given interval:\n                if (mySyncNode && mySyncNode.id === currentInstance) {\n                    pollHandle = setTimeout(poll, LOCAL_POLL);\n                }\n            });\n        });\n    }\n\n    function cleanup() {\n        var ourSyncNode = mySyncNode;\n        if (!ourSyncNode) return Promise.reject(\"Database closed\");\n        return db.transaction('rw', '_syncNodes', '_changes', '_intercomm', function () {\n            // Cleanup dead local nodes that has no heartbeat for over a minute\n            // Dont do the following:\n            //nodes.where(\"lastHeartBeat\").below(Date.now() - NODE_TIMEOUT).and(function (node) { return node.type == \"local\"; }).delete();\n            // Because client may have been in hybernate mode and recently woken up. That would lead to deletion of all nodes.\n            // Instead, we should mark any old nodes for deletion in a minute or so. If they still dont wakeup after that minute we could consider them dead.\n            var weBecameMaster = false;\n            db._syncNodes.where(\"lastHeartBeat\").below(Date.now() - NODE_TIMEOUT).and(function (node) {\n                return node.type === 'local';\n            }).modify(function (node) {\n                if (node.deleteTimeStamp && node.deleteTimeStamp < Date.now()) {\n                    // Delete the node.\n                    delete this.value;\n                    // Cleanup localStorage \"deadnode:\" entry for this node (localStorage API was used to wakeup other windows (onstorage event) - an event type missing in indexedDB.)\n                    localStorage.removeItem('Dexie.Observable/deadnode:' + node.id + '/' + db.name);\n                    // Check if we are deleting a master node\n                    if (node.isMaster) {\n                        // The node we are deleting is master. We must take over that role.\n                        // OK to call nodes.update(). No need to call Dexie.vip() because nodes is opened in existing transaction!\n                        db._syncNodes.update(ourSyncNode, { isMaster: 1 });\n                        weBecameMaster = true;\n                    }\n                    // Cleanup intercomm messages destinated to the node being deleted:\n                    db._intercomm.where(\"destinationNode\").equals(node.id).modify(function (msg) {\n                        // OK to call intercomm. No need to call Dexie.vip() because intercomm is opened in existing transaction!\n                        // Delete the message from DB and if someone is waiting for reply, let ourselved answer the request.\n                        delete this.value;\n                        if (msg.wantReply) {\n                            // Message wants a reply, meaning someone must take over its messages when it dies. Let us be that one!\n                            Dexie.ignoreTransaction(function () {\n                                consumeMessage(msg);\n                            });\n                        }\n                    });\n                } else if (!node.deleteTimeStamp) {\n                    // Mark the node for deletion\n                    node.deleteTimeStamp = Date.now() + HIBERNATE_GRACE_PERIOD;\n                }\n            }).then(function () {\n                // Cleanup old revisions that no node is interested of.\n                Observable.deleteOldChanges(db);\n                return db.on(\"cleanup\").fire(weBecameMaster);\n            });\n        });\n    }\n\n    function onBeforeUnload(event) {\n        // Mark our own sync node for deletion.\n        if (!mySyncNode) return;\n        browserIsShuttingDown = true;\n        mySyncNode.deleteTimeStamp = 1; // One millisecond after 1970. Makes it occur in the past but still keeps it truthy.\n        mySyncNode.lastHeartBeat = 0;\n        db._syncNodes.put(mySyncNode); // This async operation may be cancelled since the browser is closing down now.\n        Observable.wereTheOneDying = true; // If other nodes in same window wakes up by this call, make sure they dont start taking over mastership and stuff...\n        // Inform other windows that we're gone, so that they may take over our role if needed. Setting localStorage item below will trigger Observable.onStorage, which will trigger onSuicie() below:\n        localStorage.setItem('Dexie.Observable/deadnode:' + mySyncNode.id.toString() + '/' + db.name, \"dead\"); // In IE, this will also wakeup our own window. However, that is doublechecked in nursecall subscriber below.\n    }\n\n    function onSuicide(dbname, nodeID) {\n        if (dbname === db.name && !Observable.wereTheOneDying) {\n            // Make sure it's dead indeed. Second bullet. Why? Because it has marked itself for deletion in the onbeforeunload event, which is fired just before window dies.\n            // It's own call to put() may have been cancelled.\n            // Note also that in IE, this event may be called twice, but that doesnt harm!\n            Dexie.vip(function () {\n                db._syncNodes.update(nodeID, { deleteTimeStamp: 1, lastHeartBeat: 0 }).then(cleanup);\n            });\n        }\n    }\n\n    //\n    // Intercommunication between nodes\n    //\n    // Enable inter-process communication between browser windows\n\n    var requestsWaitingForReply = {};\n\n    db.sendMessage = function (type, message, destinationNode, options) {\n        /// <param name=\"type\" type=\"String\">Type of message</param>\n        /// <param name=\"message\">Message to send</param>\n        /// <param name=\"destinationNode\" type=\"Number\">ID of destination node</param>\n        /// <param name=\"options\" type=\"Object\" optional=\"true\">{wantReply: Boolean, isFailure: Boolean, requestId: Number}. If wantReply, the returned promise will complete with the reply from remote. Otherwise it will complete when message has been successfully sent.</param>\n        if (!mySyncNode) return Promise.reject(\"Database closed\");\n        options = options || {};\n        var msg = { message: message, destinationNode: destinationNode, sender: mySyncNode.id, type: type };\n        Dexie.extend(msg, options); // wantReply: wantReply, success: !isFailure, requestId: ...\n        var tables = [\"_intercomm\"];\n        if (options.wantReply) tables.push(\"_syncNodes\"); // If caller wants a reply, include \"_syncNodes\" in transaction to check that there's a reciever there. Otherwise, new master will get it.\n        return db.transaction('rw?', tables, function () {\n            if (options.wantReply) {\n                // Check that there is a reciever there to take the request.\n                return db._syncNodes.where('id').equals(destinationNode).count(function (recieverAlive) {\n                    if (recieverAlive) return addMessage(msg);else return db._syncNodes.where('isMaster').above(0).first(function (masterNode) {\n                        msg.destinationNode = masterNode.id;\n                        return addMessage(msg);\n                    });\n                });\n            } else {\n                addMessage(msg); // No need to return Promise. Caller dont need a reply.\n            }\n\n            function addMessage(msg) {\n                return db._intercomm.add(msg).then(function (messageId) {\n                    localStorage.setItem(\"Dexie.Observable/intercomm/\" + db.name, messageId.toString());\n                    Dexie.ignoreTransaction(function () {\n                        Observable.on.intercomm.fire(db.name);\n                    });\n                    if (options.wantReply) {\n                        return new Promise(function (resolve, reject) {\n                            requestsWaitingForReply[messageId.toString()] = { resolve: resolve, reject: reject };\n                        });\n                    }\n                });\n            }\n        });\n    };\n\n    db.broadcastMessage = function (type, message, bIncludeSelf) {\n        if (!mySyncNode) return Promise.reject(\"Database closed\");\n        var mySyncNodeId = mySyncNode.id;\n        db._syncNodes.each(function (node) {\n            if (node.type === 'local' && (bIncludeSelf || node.id !== mySyncNodeId)) {\n                db.sendMessage(type, message, node.id);\n            }\n        });\n    };\n\n    db.observable = {};\n    db.observable.SyncNode = SyncNode;\n\n    function consumeIntercommMessages() {\n        // Check if we got messages:\n        if (!mySyncNode) return Promise.reject(\"Database closed\");\n        return db.table('_intercomm').where(\"destinationNode\").equals(mySyncNode.id).modify(function (msg) {\n            // For each message, fire the event and remove message.\n            delete this.value;\n            Dexie.ignoreTransaction(function () {\n                consumeMessage(msg);\n            });\n        });\n    }\n\n    function consumeMessage(msg) {\n        if (msg.type === 'response') {\n            // This is a response. Lookup pending request and fulfill it's promise.\n            var request = requestsWaitingForReply[msg.requestId.toString()];\n            if (request) {\n                if (msg.isFailure) {\n                    request.reject(msg.message.error);\n                } else {\n                    request.resolve(msg.message.result);\n                }\n                delete requestsWaitingForReply[msg.requestId.toString()];\n            }\n        } else {\n            // This is a message or request. Fire the event and add an API for the subscriber to use if reply is requested\n            msg.resolve = function (result) {\n                db.sendMessage('response', { result: result }, msg.sender, { requestId: msg.id });\n            };\n            msg.reject = function (error) {\n                db.sendMessage('response', { error: error.toString() }, msg.sender, { isFailure: true, requestId: msg.id });\n            };\n            var message = msg.message;\n            delete msg.message;\n            Dexie.extend(msg, message);\n            db.on.message.fire(msg);\n        }\n    }\n\n    function onIntercomm(dbname) {\n        // When storage event trigger us to check\n        if (dbname === db.name) {\n            consumeIntercommMessages();\n        }\n    }\n}\n\n//\n// Help functions\n//\n\nfunction nop() {};\n\nfunction promisableChain(f1, f2) {\n    if (f1 === nop) return f2;\n    return function () {\n        var res = f1.apply(this, arguments);\n        if (res && typeof res.then === 'function') {\n            var thiz = this,\n                args = arguments;\n            return res.then(function () {\n                return f2.apply(thiz, args);\n            });\n        }\n        return f2.apply(this, arguments);\n    };\n}\n\n//\n// Static properties and methods\n// \n\nObservable.latestRevision = {}; // Latest revision PER DATABASE. Example: Observable.latestRevision.FriendsDB = 37;\nObservable.on = Dexie.Events(null, \"latestRevisionIncremented\", \"suicideNurseCall\", \"intercomm\", \"beforeunload\"); // fire(dbname, value);\nObservable.createUUID = function () {\n    // Decent solution from http://stackoverflow.com/questions/105034/how-to-create-a-guid-uuid-in-javascript\n    var d = Date.now();\n    var uuid = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {\n        var r = (d + Math.random() * 16) % 16 | 0;\n        d = Math.floor(d / 16);\n        return (c === 'x' ? r : r & 0x7 | 0x8).toString(16);\n    });\n    return uuid;\n};\n\nObservable.deleteOldChanges = function (db) {\n    db._syncNodes.orderBy(\"myRevision\").first(function (oldestNode) {\n        var timeout = Date.now() + 300,\n            timedout = false;\n        db._changes.where(\"rev\").below(oldestNode.myRevision).until(function () {\n            return timedout = Date.now() > timeout;\n        }).delete().then(function () {\n            // If not done garbage collecting, reschedule a continuation of it until done.\n            if (timedout) setTimeout(function () {\n                Observable.deleteOldChanges(db);\n            }, 10);\n        });\n    });\n};\n\nObservable._onStorage = function onStorage(event) {\n    // We use the onstorage event to trigger onLatestRevisionIncremented since we will wake up when other windows modify the DB as well!\n    if (event.key.indexOf(\"Dexie.Observable/\") === 0) {\n        // For example \"Dexie.Observable/latestRevision/FriendsDB\"\n        var parts = event.key.split('/');\n        var prop = parts[1];\n        var dbname = parts[2];\n        if (prop === 'latestRevision') {\n            var rev = parseInt(event.newValue, 10);\n            if (!isNaN(rev) && rev > Observable.latestRevision[dbname]) {\n                Observable.latestRevision[dbname] = rev;\n                Dexie.ignoreTransaction(function () {\n                    Observable.on('latestRevisionIncremented').fire(dbname, rev);\n                });\n            }\n        } else if (prop.indexOf(\"deadnode:\") === 0) {\n            var nodeID = parseInt(prop.split(':')[1], 10);\n            if (event.newValue) {\n                Observable.on.suicideNurseCall.fire(dbname, nodeID);\n            }\n        } else if (prop === 'intercomm') {\n            if (event.newValue) {\n                Observable.on.intercomm.fire(dbname);\n            }\n        }\n    }\n};\n\nObservable._onBeforeUnload = function () {\n    Observable.on.beforeunload.fire();\n};\n\nObservable.localStorageImpl = global.localStorage;\n\n//\n// Map window events to static events in Dexie.Observable:\n//\nif (global.addEventListener) {\n    global.addEventListener(\"storage\", Observable._onStorage);\n    global.addEventListener(\"beforeunload\", Observable._onBeforeUnload);\n}\n// Register addon:\nDexie.Observable = Observable;\nDexie.addons.push(Observable);"],"names":[],"mappings":"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"}